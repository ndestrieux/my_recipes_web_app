services:
    app:
        build:
            context: .
            dockerfile: ./deployment/prod/Dockerfile
        command: /start
        expose:
            - 8000
        env_file:
            - .env/.prod
        volumes:
            - static:/app/static
            - media:/app/media
        networks:
            - network_internet
            - network_no_internet
        depends_on:
            db:
                condition: service_healthy
            mongodb:
                condition: service_healthy

    db:
        image: postgres:14
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USERS=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        hostname: ${POSTGRES_HOST}
        volumes:
            - pgdata:/var/lib/postgresql/data
        networks:
            - network_no_internet
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
            interval: 1m30s
            timeout: 30s
            retries: 6
        restart: always

    mongodb:
        image: mongo:6.0.3
        environment:
            - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
        hostname: ${MONGODB_HOST}
        volumes:
            - mongodata:/data/db
        networks:
            - network_no_internet
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/MONGO_INITDB_DATABASE --quiet
            interval: 1m30s
            timeout: 30s
            retries: 6
        restart: always

    redis:
        image: redis:7.0.6-alpine
        networks:
            - network_no_internet
        healthcheck:
            test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]

    celery:
        build:
            context: .
            dockerfile: ./deployment/prod/Dockerfile
        command: /start_worker
        env_file:
            - .env/.prod
        volumes:
            - static:/app/static
            - media:/app/media
        networks:
            - network_no_internet
            - network_internet
        depends_on:
            db:
                condition: service_healthy
            mongodb:
                condition: service_healthy
            redis:
                condition: service_healthy
            app:
                condition: service_started
        restart: always

    nginx:
        build: ./deployment/prod/nginx
        volumes:
            - static:/app/static
            - media:/app/media
        ports:
            - 80:80
        networks:
            - network_internet
            - network_no_internet
        depends_on:
            - app

networks:
    network_internet:
        driver: bridge
    network_no_internet:
        driver: bridge
        internal: true
volumes:
    pgdata:
        driver: local
    mongodata:
        driver: local
    static:
    media:
